{
  "name": "node-images",
  "version": "1.5.5",
  "description": "Cross-platform image decoder(png/jpeg/gif) and encoder(png/jpeg) for Node.js",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/xiangshouding/node-images.git"
  },
  "keywords": [
    "image",
    "decoder",
    "encoder",
    "png",
    "jpeg",
    "gif",
    "cross-platform",
    "images"
  ],
  "author": {
    "name": "fansekey",
    "email": "fansekey@gmail.com"
  },
  "license": "MIT",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/xiangshouding/node-images/issues"
  },
  "readme": "![images logo](https://raw.github.com/zhangyuanwei/node-images/master/demo/logo.png)\n===========\n\nCross-platform image decoder(png/jpeg/gif) and encoder(png/jpeg) for Node.js  \nNode.js轻量级跨平台图像编解码库\n\n``` javascript\nvar images = require(\"node-images\");\n\nimages(\"input.jpg\")                     //Load image from file \n                                        //加载图像文件\n    .size(400)                          //Geometric scaling the image to 400 pixels width\n                                        //等比缩放图像到400像素宽\n    .draw(images(\"logo.png\"), 10, 10)   //Drawn logo at coordinates (10,10)\n                                        //在(10,10)处绘制Logo\n    .save(\"output.jpg\", {               //Save the image to a file,whih quality 50\n        quality : 50                    //保存图片到文件,图片质量为50\n\t});\n```\n## Features 功能特性\n\n* Lightweight:no need to install any image processing library.\n* 轻量级：无需安装任何图像处理库。\n* Cross-platform: Released a compiled .node file on windows, just download and start.\n* 跨平台：Windows下发布了编译好的.node文件,下载就能用。\n* Easy-to-use: Provide jQuery-like chaining API.Simple and reliable!\n* 方便用：jQuery风格的API，简单可依赖。\n\n## Installation 安装\n\t$ npm install node-images\n\nYou will also need to install:\n\n+ giflib 4.x.x\n+ libpng 1.5.x\n+ jpeg-turbo 1.x.x\n\n\n## API 接口\n\nnode-images provide jQuery-like Chaining API,You can start the chain like this:  \nnode-images 提供了类似jQuery的链式调用API,您可以这样开始:\n\n```javascript\n/* Load and decode image from file */\n/* 从指定文件加载并解码图像 */\nimages(file)\n\n/* Create a new transparent image */\n/* 创建一个指定宽高的透明图像 */\nimages(width, height)\n\n/* Load and decode image from a buffer */\n/* 从Buffer数据中解码图像 */\nimages(buffer[, start[, end]])\n\n/* Copy from another image */\n/* 从另一个图像中复制区域来创建图像 */\nimages(image[, x, y, width, height])\n```\n\n### images(file)\nLoad and decode image from file  \n从指定文件加载并解码图像\n\n### images(width, height)\nCreate a new transparent image  \n创建一个指定宽高的透明图像\n\n### images(buffer[, start[, end]])\nLoad and decode image from a buffer  \n从Buffer数据中解码图像\n\n### images(image[, x, y, width, height])\nCopy from another image  \n从另一个图像中复制区域来创建图像\n\n### .fill(red, green, blue[, alpha])\neg:`images(200, 100).fill(0xff, 0x00, 0x00, 0.5)`\nFill image with color  \n以指定颜色填充图像\n\n### .draw(image, x, y)\nDraw *image* on the current image position( *x* , *y* )  \n在当前图像( *x* , *y* )上绘制 *image* 图像\n\n### .encode(type[, config])\neg:`images(\"input.png\").encode(\"jpg\", {operation:50})`\nEncode image to buffer, *config* is image setting.  \n以指定格式编码当前图像到Buffer，config为图片设置，目前支持设置JPG图像质量  \nReturn buffer  \n返回填充好的Buffer  \n**Note:The operation will cut off the chain**  \n**注意:该操作将会切断调用链**  \nSee:.save(file[, type[, config]])\n参考:.save(file[, type[, config]])\n\n### .save(file[, type[, config]])\neg:`images(\"input.png\").encode(\"output.jpg\", {operation:50})`\nEncoding and save the current image to a *file*, if the *type* is not specified, *type* well be automatically determined according to the *file*, *config* is image setting. eg: `{ operation:50 }`  \n编码并保存当前图像到 *file* ,如果type未指定,则根据 *file* 自动判断文件类型，config为图片设置，目前支持设置JPG图像质量\n\n### .size([width[, height]])\nGet size of the image or set the size of the image,if the height is not specified, then scaling based on the current width and height  \n获取或者设置图像宽高，如果height未指定，则根据当前宽高等比缩放\n\n### .width([width])\nGet width for the image or set width of the image  \n获取或设置图像宽度\n\n### .height([height])\nGet height for the image or set height of the image  \n获取或设置图像高度\n\n### images.setLimit(width, height)\nSet the limit size of each image  \n设置库处理图片的大小限制,设置后对所有新的操作生效(如果超限则抛出异常)。\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/xiangshouding/node-images",
  "_id": "node-images@1.5.5",
  "_shasum": "fdf125a714f299259492770086da967e13e81830",
  "_from": "node-images@1.5.5",
  "_resolved": "https://registry.npmjs.org/node-images/-/node-images-1.5.5.tgz"
}
